<?php

function bunchball_user_interaction_menu() {
  $items = array();
  $items['admin/config/bunchball/user-interaction'] = array(
    'title' => 'User interaction',
    'type' => MENU_LOCAL_TASK,
    'callback' => 'drupal_get_form',
    'page arguments' => array('bunchball_user_interaction_admin_form'),
    'file' => 'bunchball_user_interaction.admin.inc',
    'access arguments' => array('configure bunchball'),
  );
  return $items;
}


/**
 * Implement hook_user_insert()
 */
function bunchball_user_interaction_user_insert(&$edit, $account, $category) {
  //@TODO this makes use of one default class configured to be 'the one'
  //via the UI.  It could be possible to allow for more.
  //but the code also makes assumptions about how the options are stored
  //and that could require some refactoring
  //or more documentation for anyone that wants to create a plugin of this type
  $plugin_id = variable_get('bunchball_user_interaction_plugin', '');
  if ($class = bunchball_user_interaction_get_plugin_instance($plugin_id)) {
    $options = $class->getOptions();
    if ($options['bunchball_user_register']['enabled']) {
      $class->$options['bunchball_user_register']['method']($account);
    }
  }

}

/**
 * Implement hook_user_save()
 */
function bunchball_user_interaction_user_update(&$edit, $account, $category){
  //@TODO this makes use of one default class configured to be 'the one'
  //via the UI.  It could be possible to allow for more.
  //but the code also makes assumptions about how the options are stored
  //and that could require some refactoring
  //or more documentation for anyone that wants to create a plugin of this type
  $plugin_id = variable_get('bunchball_user_interaction_plugin', '');
  if ($class = bunchball_user_interaction_get_plugin_instance($plugin_id)) {
    $options = $class->getOptions();
    if ($options['bunchball_user_profile_complete']['enabled']) {
      $class->$options['bunchball_user_profile_complete']['method']($account);
    }
    if ($options['bunchball_user_profile_picture']['enabled']) {
      $class->$options['bunchball_user_profile_picture']['method']($account);
    }
  }
}

/**
 * Implement hook_user_login
 */
function bunchball_user_interaction_user_login(&$edit, $account) {
  //@TODO this makes use of one default class configured to be 'the one'
  //via the UI.  It could be possible to allow for more.
  //but the code also makes assumptions about how the options are stored
  //and that could require some refactoring
  //or more documentation for anyone that wants to create a plugin of this type
  $plugin_id = variable_get('bunchball_user_interaction_plugin', '');
  if ($class = bunchball_user_interaction_get_plugin_instance($plugin_id)) {
    $options = $class->getOptions();
    if ($options['bunchball_user_login']['enabled']) {
      $class->$options['bunchball_user_login']['method']($account);
    }
  }
}

function bunchball_user_interaction_get_plugin_instance($id) {
  $instances = &drupal_static(__FUNCTION__);
  if(!isset($instances[$id])) {
    ctools_include('plugins');
    $plugin = ctools_get_plugins('bunchball_user_interaction', 'bunchball_user_interaction', $id);
    $class = ctools_plugin_get_class($plugin, 'handler');
    $instances[$id] = new $class(NitroAPI_Factory::getInstance());
  }
  return $instances[$id];
}

/**
 * Implement hook_ctools_plugin_type
 */
function bunchball_user_interaction_ctools_plugin_type() {
  $plugins['bunchball_user_interaction'] = array(
    'use hooks' => FALSE,
    'child plugins' => TRUE,
  );
  return $plugins;
}

/**
 * Implement hook_ctools_plugin_directory
 */
function bunchball_user_interaction_ctools_plugin_directory($module, $plugin) {
  if ($module == 'bunchball_user_interaction' && $plugin == 'bunchball_user_interaction') {
    return 'plugins/bunchball_user_interaction';
  }
}
